//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationQuestionnare.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IRelaxEntities4 : DbContext
    {
        public IRelaxEntities4()
            : base("name=IRelaxEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DailyActivity> DailyActivities { get; set; }
        public virtual DbSet<DailyLoginTime> DailyLoginTimes { get; set; }
        public virtual DbSet<EmployeePersonalDetail> EmployeePersonalDetails { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Questionaire> Questionaires { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<WeekendActivity> WeekendActivities { get; set; }
        public virtual DbSet<WeekendEmployeeInterest> WeekendEmployeeInterests { get; set; }
        public virtual DbSet<DailyActivityTrack> DailyActivityTracks { get; set; }
        public virtual DbSet<DailyEmployeeInterest> DailyEmployeeInterests { get; set; }
        public virtual DbSet<ImageDB> ImageDBs { get; set; }
        public virtual DbSet<WeekendActivityTrack> WeekendActivityTracks { get; set; }
        public virtual DbSet<LoginTime> LoginTimes { get; set; }
        public virtual DbSet<LoginTime1> LoginTime1 { get; set; }
        public virtual DbSet<LoginTime2> LoginTime2 { get; set; }
        public virtual DbSet<LoginTime3> LoginTime3 { get; set; }
    
        public virtual int insert_activity_track(string psno, Nullable<int> id, Nullable<System.DateTime> starttime)
        {
            var psnoParameter = psno != null ?
                new ObjectParameter("psno", psno) :
                new ObjectParameter("psno", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_activity_track", psnoParameter, idParameter, starttimeParameter);
        }
    
        public virtual int insert_login_time(string eid, Nullable<int> mood)
        {
            var eidParameter = eid != null ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(string));
    
            var moodParameter = mood.HasValue ?
                new ObjectParameter("mood", mood) :
                new ObjectParameter("mood", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_login_time", eidParameter, moodParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<TaskCompletionListForDay_Result> TaskCompletionListForDay(string empId, Nullable<System.DateTime> todayDate)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskCompletionListForDay_Result>("TaskCompletionListForDay", empIdParameter, todayDateParameter);
        }
    
        public virtual ObjectResult<update_login_time_Result> update_login_time(string eid)
        {
            var eidParameter = eid != null ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<update_login_time_Result>("update_login_time", eidParameter);
        }
    
        public virtual ObjectResult<update_logout_time_Result> update_logout_time(string eid)
        {
            var eidParameter = eid != null ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<update_logout_time_Result>("update_logout_time", eidParameter);
        }
    
        public virtual ObjectResult<WeekendSuggestion_Result> WeekendSuggestion(string empID, ObjectParameter name, ObjectParameter desc, ObjectParameter city, ObjectParameter bestTime)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WeekendSuggestion_Result>("WeekendSuggestion", empIDParameter, name, desc, city, bestTime);
        }
    }
}
